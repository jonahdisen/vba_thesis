%-----------------------------------------------------------------------
% normalize.m
%
% Description: Create DARTEL template for normalization, then normalize all modalities to
%   MNI space
% Author: Jonah Isen
% Created: February 17th, 2020
% Last Modified: April 14th, 2020
%-----------------------------------------------------------------------

function normalize(path, mods, max)

disp('Generating DARTEL template');

rc1s = {};
rc2s = {};
buffer = 1;

%Create cell arrays of grey and white matter
for group = ['C' 'D' 'N']
    for i = 1:max
        rc1 = strcat(path, 'rc1', group, num2str(i, '%03.f'), '_T1.nii');
        rc2 = strcat(path, 'rc2', group, num2str(i, '%03.f'), '_T1.nii');
        if exist(rc1, 'file') == 2 && exist(rc2, 'file') == 2
            rc1s{buffer} = rc1;
            rc2s{buffer} = rc2;
            buffer = buffer + 1;
        end
    end
end


%Create DARTEL template from segmented grey matter and white matter
matlabbatch{1}.spm.tools.dartel.warp.images{1,1} = rc1s.';
matlabbatch{1}.spm.tools.dartel.warp.images{1,2} = rc2s.';
matlabbatch{1}.spm.tools.dartel.warp.settings.template = 'Template';
matlabbatch{1}.spm.tools.dartel.warp.settings.rform = 0;  
matlabbatch{1}.spm.tools.dartel.warp.settings.param(1).its = 3;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(1).rparam = [4 2 1e-06];
matlabbatch{1}.spm.tools.dartel.warp.settings.param(1).K = 0;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(1).slam = 16;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(2).its = 3;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(2).rparam = [2 1 1e-06];
matlabbatch{1}.spm.tools.dartel.warp.settings.param(2).K = 0;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(2).slam = 8;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(3).its = 3;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(3).rparam = [1 0.5 1e-06];
matlabbatch{1}.spm.tools.dartel.warp.settings.param(3).K = 1;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(3).slam = 4;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(4).its = 3;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(4).rparam = [0.5 0.25 1e-06];
matlabbatch{1}.spm.tools.dartel.warp.settings.param(4).K = 2;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(4).slam = 2;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(5).its = 3;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(5).rparam = [0.25 0.125 1e-06];
matlabbatch{1}.spm.tools.dartel.warp.settings.param(5).K = 4;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(5).slam = 1;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(6).its = 3;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(6).rparam = [0.25 0.125 1e-06];
matlabbatch{1}.spm.tools.dartel.warp.settings.param(6).K = 6;
matlabbatch{1}.spm.tools.dartel.warp.settings.param(6).slam = 0.5;
matlabbatch{1}.spm.tools.dartel.warp.settings.optim.lmreg = 0.01;
matlabbatch{1}.spm.tools.dartel.warp.settings.optim.cyc = 3;
matlabbatch{1}.spm.tools.dartel.warp.settings.optim.its = 3;

spm_jobman('run',matlabbatch)
clear matlabbatch;

%Template generated from above code
final_template = strcat(path, 'Template_6.nii');

disp('Normalizing data to MNI space');

%Normalize all modalities
batchBuffer = 0;
for group = ['C' 'D' 'N']
    for i = 1:max
        toNormalize = {};
        buffer = 1;
        %Loop makes cell array of paths to images to be normalized for each
        %subject
        for j = 1:size(mods, 2)
            if ~any(strcmp({'T1', 'B0'}, char(mods(j))))
                current = strcat(path, 'r', group, num2str(i, '%03.f'), '_', char(mods(j)), '.nii');
                if exist(current, 'file') == 2
                    toNormalize{buffer} = {current};
                    buffer = buffer + 1;
                end
            %If T1, need to normalize GM and WM
            elseif strcmp('T1', char(mods(j)))
                gm = strcat(path, 'c1', group, num2str(i, '%03.f'), '_T1.nii');
                wm = strcat(path, 'c2', group, num2str(i, '%03.f'), '_T1.nii');
                if exist(gm, 'file') == 2 && exist(wm, 'file') == 2
                    toNormalize{buffer} = {gm};
                    buffer = buffer + 1;
                    toNormalize{buffer} = {wm};
                    buffer = buffer + 1;
                end 
            end
              
        end
        %Should a lesion mask exist for the subject, normalize as well
        lesion = strcat(path, group, num2str(i, '%03.f'), '_Lesion.nii');
        if exist(lesion, 'file') == 2
            toNormalize{buffer} = {lesion};
        end
        %Use flowfield generated by previous step
        flowfield = strcat(path, 'u_rc1', group, num2str(i, '%03.f'), '_T1_Template.nii');
        if exist(flowfield, 'file') == 2 && ~isempty(toNormalize)
            batchBuffer = batchBuffer + 1;
            matlabbatch{batchBuffer}.spm.tools.dartel.mni_norm.template = {final_template};
            matlabbatch{batchBuffer}.spm.tools.dartel.mni_norm.data.subjs.flowfields = {flowfield};
            matlabbatch{batchBuffer}.spm.tools.dartel.mni_norm.data.subjs.images = toNormalize.';
            matlabbatch{batchBuffer}.spm.tools.dartel.mni_norm.vox = [NaN NaN NaN];
            matlabbatch{batchBuffer}.spm.tools.dartel.mni_norm.bb = [NaN NaN NaN
                                                           NaN NaN NaN];
            matlabbatch{batchBuffer}.spm.tools.dartel.mni_norm.preserve = 0;
            matlabbatch{batchBuffer}.spm.tools.dartel.mni_norm.fwhm = [8 8 8];
        end
    end
end

if batchBuffer > 0
    spm_jobman('run',matlabbatch);
end

end
